import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import {
  CHANNEL_PLAYLIST_URI,
  ADD_PLAYLIST,
  REMOVE_PLAYLIST,
} from "../../const";

const initialState = {
  user: {
    name: "laguna",
    email: "laguna@gmail.com",
    roleID: 1,
  },
  playlist: [],
  status: "idle",
};

export const getPlaylist = createAsyncThunk("user/getPlaylist", async () => {
  const res = await fetch(CHANNEL_PLAYLIST_URI, {
    method: "GET",
    headers: {
      "Content-Type": "application/json",
    },
  });
  const data = await res.json();
  return data;
});
export const addPlaylist = createAsyncThunk(
  "user/addPlaylist",
  async (value, { dispatch, getState }) => {
    /*  const res = */ await fetch(
      CHANNEL_PLAYLIST_URI + ADD_PLAYLIST + value.id,
      {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
    //const data = await res.json();

    return value;
  }
);
export const removePlaylist = createAsyncThunk(
  "user/removePlaylist",
  async (value) => {
    /* const res = */ await fetch(
      CHANNEL_PLAYLIST_URI + REMOVE_PLAYLIST + value.id,
      {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
    //const data = await res.json();
    console.log("item borrado correctamente");
    return value;
  }
);

export const userSlice = createSlice({
  name: "user",
  initialState,

  reducers: {
    increment: (state) => {},
    decrement: (state) => {},
    add_item_to_playlist: (state, action) => {
      state.playlist = [...state.playlist, action.payload];
    },
    remove_item_from_playlist: (state, action) => {
      console.log("EL ESTADO DE LA PLAYLIST ES: ", state.playlist);
      console.log("EL ITEM A BORRAR ES: ", action.payload);
      //const newPlayList = state.playlist.map()
      //state.playlist = [...state.playlist, action.payload];
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getPlaylist.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getPlaylist.rejected, (state) => {
        state.status = "Error";
      })
      .addCase(getPlaylist.fulfilled, (state, action) => {
        state.status = "idle";
        state.playlist = [...action.payload];
      });
    builder
      .addCase(addPlaylist.pending, (state) => {
        state.status = "loading";
      })
      .addCase(addPlaylist.rejected, (state) => {
        state.status = "Error";
      })
      .addCase(addPlaylist.fulfilled, (state, action) => {
        state.status = "idle";
        const localplaylist = [...state.playlist];
        const exist = localplaylist.some((obj) => obj.id === action.payload.id);
        console.log("existe el item en la lista? ", exist);
        if (!exist) {
          state.playlist = [...state.playlist, action.payload];
          console.log("EL se agrega correctamente ", action.payload);
        } else {
          console.log("EL ITEM YA EXISTE ", action.payload);
        }
      });
    builder
      .addCase(removePlaylist.pending, (state) => {
        state.status = "loading";
      })
      .addCase(removePlaylist.rejected, (state) => {
        state.status = "Error";
      })
      .addCase(removePlaylist.fulfilled, (state, action) => {
        state.status = "idle";
        console.log("el item que fue removido es: ", action.payload);
        const localplaylist = [...state.playlist];
        const newPlayList = localplaylist.filter((e) =>
          e.id !== action.payload.id ? e : null
        );
        state.playlist = newPlayList;
      });
  },
});

export const { increment, decrement, add_item_to_playlist } = userSlice.actions;

export const user = (state) => state.user.user;
export const userStatus = (state) => state.user.status;
export const PlayList = (state) => state.user.playlist;

export default userSlice.reducer;
